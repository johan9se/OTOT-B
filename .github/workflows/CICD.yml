# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CICD

on:
  push:
    branches: [ "main" ]

jobs:
  cont-integration:

    runs-on: ubuntu-latest
    env:
      ENV: LOCAL
      MONGODB_LOCAL_URI: mongodb://mongo:27017

    strategy:
      matrix:
        node-version: [16.x]
        mongodb-version: ['6.0']
        
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.8.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}

    - run: npm install
    - run: npm test
    

  cont-deployment:
    needs: cont-integration
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Installing NPM
      run: npm install
      
    - run: npm ci

    - name: Generate deployment package
      run: zip -r deploy.zip * -x "**node_modules**"
      
    - name: Get timestamp
      uses: gerred/actions/current-time@master
      id: current-time

    - name: Run string replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'
  
    - name: Beanstalk Deploy my app
      uses: einaregilsson/beanstalk-deploy@v18
      with:
        aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws_secret_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        application_name: BbtDiary
        environment_name: Bbtdiary-env
        region: ${{secrets.AWS_DEFAULT_REGION}}
        version_label: "app-version-${{ steps.format-time.outputs.replaced }}" #Using timestamp for the versions
        deployment_package: deploy.zip

    - name: Deployed successfully!
      run: echo App deployed to ELB

